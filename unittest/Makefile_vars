# Makefile
LD=g++
# Set clang++ if you like
CXX?=g++
AS=as
RUBY=ruby

INCLUDES=-I. -I.. -Iunittest

LIBPATH=
LIBCFLAGS=
LIBS=-lcppunit
LIBS_BOOST=-lboost_system -lboost_thread

ifneq ($(OS),Windows_NT)
# Workaround for GCC 4.8 and std::thread
GCC_MAJOR_VERSION:=$(shell export LC_ALL=C ; gcc -v 2>&1 | tail -1 | cut -d " " -f 3 | cut -d "." -f1)
#LDFLAGS=-Wl,--no-as-needed
LDFLAGS=
LIBS+=-lpthread

else
ifneq (,$(findstring cygwin,$(shell gcc -dumpmachine)))
PYTHON=python3
LDFLAGS=
LIBS+=

else
# MinGW does not support C++11 thread
PYTHON=python
LDFLAGS=
LIBS+=
endif
endif

ifeq ($(CXX),clang++)
LLVM_VERSION:=$(shell export LC_ALL=C ; clang++ -v 2>&1 | head -1 | sed -e "s/.* \\([0-9]\\)\\.\\([0-9]\\).*/\\1.\\2/")
LLVM_CPP17_VERSION=5.0
VERSION_COMPARED=$(shell echo "$(LLVM_VERSION) >= $(LLVM_CPP17_VERSION)" | bc)
else
GCC_VERSION:=$(shell export LC_ALL=C ; g++ -v 2>&1 | tail -1 | sed -e "s/.* \\([0-9]\\)\\.\\([0-9]\\).*/\\1.\\2/")
GCC_CPP17_VERSION=7.2
VERSION_COMPARED=$(shell echo "$(GCC_VERSION) >= $(GCC_CPP17_VERSION)" | bc)
endif

ifeq (1,$(VERSION_COMPARED))
CPP_STD=-std=c++17
else
CPP_STD=-std=c++11
endif

# -Wconversion causes warnings that are ignorable.
CPPFLAGS_WALL=-Wall -W -Wformat=2 -Wcast-qual -Wcast-align -Wwrite-strings -Wfloat-equal -Wpointer-arith -Wno-unused-parameter
CPPFLAGS_INTEL_SYNTAX=-masm=intel
CPPFLAGS_COMMON=$(CPP_STD) -O0 -g $(CPPFLAGS_WALL) -m64 -DUNITTEST $(INCLUDES) $(LIBCFLAGS)
CPPFLAGS_DIAGONAL=-DDIAGONAL_SUDOKU=1
CPPFLAGS_SSE=$(CPPFLAGS_COMMON) -msse4.2 -DSUDOKU_USE_AVX=0
CPPFLAGS_AVX=$(CPPFLAGS_COMMON) -mavx2 -DSUDOKU_USE_AVX=1
CPPFLAGS_NO_PARALLEL=$(CPPFLAGS_COMMON) -msse4.2 -DSUDOKU_USE_AVX=0 -DNO_PARALLEL
CPPFLAGS_USE_BOOST=$(CPPFLAGS_COMMON) -msse4.2 -DSUDOKU_USE_AVX=0 -DSOLVE_PARALLEL_WITH_BOOST_THREAD

# Set all macro values or the assembler has unexpected behaviors
ASFLAGS_UNPACKED=-defsym CellsPacked=0 -defsym DiagonalSudoku=0
ASFLAGS_PACKED=-defsym CellsPacked=1 -defsym DiagonalSudoku=0
ASFLAGS_SSE=-defsym EnableAvx=0
ASFLAGS_AVX=-defsym EnableAvx=1
ASFLAGS_DIAGONAL=-defsym CellsPacked=0 -defsym DiagonalSudoku=1 $(ASFLAGS_AVX)

POSTFIX_DIAGONAL=_diagonal
POSTFIX_UNPACKED=_unpacked
POSTFIX_PACKED=_packed
POSTFIX_SSE=_sse
POSTFIX_AVX=_avx
POSTFIX_NO_PARALLEL=_no_parallel
POSTFIX_USE_BOOST=_use_boost

CELLS_DIAGONAL_TARGET_AVX=unittest_sudoku_diagonal
CELLS_UNPACKED_TARGET_SSE=unittest_cells$(POSTFIX_UNPACKED)$(POSTFIX_SSE)
CELLS_PACKED_TARGET_SSE=unittest_cells$(POSTFIX_PACKED)$(POSTFIX_SSE)
CELLS_UNPACKED_TARGET_AVX=unittest_cells$(POSTFIX_UNPACKED)$(POSTFIX_AVX)
CELLS_PACKED_TARGET_AVX=unittest_cells$(POSTFIX_PACKED)$(POSTFIX_AVX)
NO_PARALLEL_TARGET=unittest_cells$(POSTFIX_NO_PARALLEL)
USE_BOOST_TARGET=unittest_cells$(POSTFIX_USE_BOOST)

TARGETS=$(CELLS_DIAGONAL_TARGET_AVX) \
        $(CELLS_UNPACKED_TARGET_SSE) $(CELLS_PACKED_TARGET_SSE) \
        $(CELLS_UNPACKED_TARGET_AVX) $(CELLS_PACKED_TARGET_AVX) \
        $(NO_PARALLEL_TARGET)

ifneq (,$(findstring cygwin,$(shell gcc -dumpmachine)))
TARGETS+=$(USE_BOOST_TARGET)
endif

ifneq (,$(findstring linux,$(shell gcc -dumpmachine)))
TESTED_OS_DEPENDENT_OBJ=sudoku_linux.o
TESTER_OS_DEPENDENT_OBJ=sudokulinuxtest.o
else
TESTED_OS_DEPENDENT_OBJ=sudoku_windows.o
TESTER_OS_DEPENDENT_OBJ=sudokuwindowstest.o
endif
OS_DEPENDENT_OBJS=$(TESTED_OS_DEPENDENT_OBJ) $(TESTER_OS_DEPENDENT_OBJ)

TESTER_OBJS=main.o sudokutest.o sudokucelltest.o \
            sudokumaptest.o sudokusolvertest.o sudokuloadertest.o sudokuparalleltest.o
# We cannot use %reg in clang inline assembly
ifneq ($(CXX),clang++)
TESTER_OBJS+=sudokussetest.o
endif

TESTED_OBJS=sudoku.o sudokuxmmreg.o sudoku_std.o
TESTED_BOOST_OBJS=sudoku_boost.o
CPP_OBJS=$(TESTER_OBJS) $(TESTED_OBJS)

ASM_DIAGONAL_OBJS=sudokusse_cells$(POSTFIX_DIAGONAL).o
ASM_UNPACKED_OBJS=sudokusse_cells$(POSTFIX_UNPACKED).o
ASM_PACKED_OBJS=sudokusse_cells$(POSTFIX_PACKED).o

CELLS_DIAGONAL_OBJS_AVX=$(patsubst %.o,%$(POSTFIX_DIAGONAL).o,$(CPP_OBJS) $(OS_DEPENDENT_OBJS)) $(ASM_DIAGONAL_OBJS)
CELLS_UNPACKED_OBJS_SSE=$(patsubst %.o,%$(POSTFIX_SSE).o,$(CPP_OBJS) $(ASM_UNPACKED_OBJS) $(OS_DEPENDENT_OBJS))
CELLS_PACKED_OBJS_SSE=$(patsubst %.o,%$(POSTFIX_SSE).o,$(CPP_OBJS) $(ASM_PACKED_OBJS) $(OS_DEPENDENT_OBJS))
CELLS_UNPACKED_OBJS_AVX=$(patsubst %.o,%$(POSTFIX_AVX).o,$(CPP_OBJS) $(ASM_UNPACKED_OBJS) $(OS_DEPENDENT_OBJS))
CELLS_PACKED_OBJS_AVX=$(patsubst %.o,%$(POSTFIX_AVX).o,$(CPP_OBJS) $(ASM_PACKED_OBJS) $(OS_DEPENDENT_OBJS))
NO_PARALLEL_OBJS=$(patsubst %.o,%$(POSTFIX_NO_PARALLEL).o,$(CPP_OBJS)) $(patsubst %.o,%$(POSTFIX_SSE).o,$(ASM_UNPACKED_OBJS) $(OS_DEPENDENT_OBJS))
USE_BOOST_OBJS=$(patsubst %.o,%$(POSTFIX_USE_BOOST).o,$(CPP_OBJS) $(TESTED_BOOST_OBJS)) $(patsubst %.o,%$(POSTFIX_SSE).o,$(ASM_UNPACKED_OBJS) $(OS_DEPENDENT_OBJS))

OBJS=$(sort $(CELLS_UNPACKED_OBJS_SSE) $(CELLS_PACKED_OBJS_SSE) $(CELLS_UNPACKED_OBJS_AVX) $(CELLS_PACKED_OBJS_AVX) $(NO_PARALLEL_OBJS) $(USE_BOOST_OBJS))

HEADERS=../sudoku.h ../sudoku_os_dependent.h sudokutest.h sudokutest_os_dependent.h

GENERATED_CODE=./sudokuConstAll.h
GENERATOR_SCRIPT_PYTHON_BASE_DIR=../code_generator
GENERATOR_SCRIPT_PYTHON_DIR=$(GENERATOR_SCRIPT_PYTHON_BASE_DIR)/sudokumap
GENERATOR_SCRIPT_PYTHON_TEST_DIR=tests
GENERATED_CODE_PYTHON=./sudokuConstAllPy.h
GENERATED_CODE_SET=$(GENERATED_CODE)
ifneq (,$(PYTHON))
GENERATED_CODE_SET+=$(GENERATED_CODE_PYTHON)
endif

GENERATOR_SCRIPT_RUBY=../sudokumap.rb
GENERATOR_SCRIPT_PYTHON=$(GENERATOR_SCRIPT_PYTHON_DIR)/sudokumap.py
GENERATOR_SCRIPT_PYTHON_TEST=$(GENERATOR_SCRIPT_PYTHON_BASE_DIR)/$(GENERATOR_SCRIPT_PYTHON_TEST_DIR)/test_sudokumap.py
GENERATOR_SCRIPTS=$(GENERATOR_SCRIPT_RUBY) $(GENERATOR_SCRIPT_PYTHON) $(GENERATOR_SCRIPT_PYTHON_TEST)

# Do not use VPATH to avoid link ../*.o
vpath %.s ..
vpath %.h ..
vpath %.hpp ..
vpath %.cpp ..

ALL_UPDATED_VARIABLES= \
	LD CXX AS RUBY PYTHON \
	INCLUDES LIBPATH LIBCFLAGS LIBS LIBS_BOOST GCC_MAJOR_VERSION LDFLAGS \
	LLVM_VERSION LLVM_CPP17_VERSION GCC_VERSION GCC_CPP17_VERSION VERSION_COMPARED CPP_STD \
	CPPFLAGS_INTEL_SYNTAX CPPFLAGS_COMMON CPPFLAGS_DIAGONAL CPPFLAGS_SSE CPPFLAGS_AVX \
	CPPFLAGS_NO_PARALLEL CPPFLAGS_USE_BOOST \
	ASFLAGS_UNPACKED ASFLAGS_PACKED ASFLAGS_SSE ASFLAGS_AVX ASFLAGS_DIAGONAL \
	POSTFIX_DIAGONAL POSTFIX_UNPACKED POSTFIX_PACKED POSTFIX_SSE POSTFIX_AVX POSTFIX_NO_PARALLEL POSTFIX_USE_BOOST \
	CELLS_DIAGONAL_TARGET_AVX \
	CELLS_UNPACKED_TARGET_SSE CELLS_PACKED_TARGET_SSE CELLS_UNPACKED_TARGET_AVX CELLS_PACKED_TARGET_AVX \
	NO_PARALLEL_TARGET USE_BOOST_TARGET \
	TARGETS TESTED_OS_DEPENDENT_OBJ TESTER_OS_DEPENDENT_OBJ OS_DEPENDENT_OBJS \
	TESTER_OBJS TESTED_OBJS TESTED_BOOST_OBJS CPP_OBJS \
	ASM_DIAGONAL_OBJS ASM_UNPACKED_OBJS ASM_PACKED_OBJS \
	CELLS_DIAGONAL_OBJS_AVX CELLS_UNPACKED_OBJS_SSE CELLS_PACKED_OBJS_SSE CELLS_UNPACKED_OBJS_AVX CELLS_PACKED_OBJS_AVX \
	NO_PARALLEL_OBJS USE_BOOST_OBJS OBJS \
	HEADERS GENERATED_CODE \
	GENERATOR_SCRIPT_PYTHON_BASE_DIR GENERATOR_SCRIPT_PYTHON_DIR GENERATOR_SCRIPT_PYTHON_TEST_DIR \
	GENERATED_CODE_PYTHON GENERATED_CODE_SET \
	GENERATOR_SCRIPT_RUBY GENERATOR_SCRIPT_PYTHON GENERATOR_SCRIPT_PYTHON_TEST GENERATOR_SCRIPTS VPATH

#Local Variables:
#mode: Makefile
#coding: utf-8-dos
#End:
