# Makefile
LD=g++
# Set clang++ if you like
CXX?=g++
AS=as
RUBY=ruby

# Set 0 to use SSE and 1 to AVX
USE_AVX_VALUE=1
ASFLAGS_SSE_AVX=-defsym EnableAvx=$(USE_AVX_VALUE)

ifeq ($(USE_AVX_VALUE),0)
CPPFLAGS_SSE_AVX=-msse4.2
else
CPPFLAGS_SSE_AVX=-mavx2
endif

CPPFLAGS_INTEL_SYNTAX=-masm=intel

ifneq ($(OS),Windows_NT)
# Workaround for GCC 4.8 and std::thread
GCC_MAJOR_VERSION:=$(shell export LC_ALL=C ; gcc -v 2>&1 | tail -1 | cut -d " " -f 3 | cut -d "." -f1)
PYTHON=python3
#LDFLAGS=-Wl,--no-as-needed
LDFLAGS=
LIBS=-lpthread
CPPFLAGS_PARALLEL=

else
ifneq (,$(findstring cygwin,$(shell gcc -dumpmachine)))
PYTHON=python3
ifeq (yes,$(USE_BOOST_THREAD))
LDFLAGS=
LIBS=-lboost_system -lboost_thread
CPPFLAGS_PARALLEL=-DSOLVE_PARALLEL_WITH_BOOST_THREAD
else
LDFLAGS=
LIBS=
CPPFLAGS_PARALLEL=
endif

else
# MinGW does not support C++11 thread
BUILD_ON_MINGW=yes
PYTHON=python
ifeq (yes,$(USE_BOOST_THREAD))
LDFLAGS=-LC:\MinGW\lib
LIBS=-lboost_system -lboost_thread
CPPFLAGS_PARALLEL=-IC:\MinGW\include -DSOLVE_PARALLEL_WITH_BOOST_THREAD
else
LDFLAGS=
LIBS=
CPPFLAGS_PARALLEL=-DNO_PARALLEL
endif

# Workaround for clang++ and ld
ifeq ($(CXX),clang++)
LDFLAGS+=-Wl,--allow-multiple-definition
endif
endif
endif

GCC_FULL_VERSION:=$(shell export LC_ALL=C ; gcc -v 2>&1 | tail -1 | cut -d " " -f 3)
ifeq ($(CXX),clang++)
# Using clang++
LLVM_VERSION:=$(shell export LC_ALL=C ; clang++ -v 2>&1 | head -1 | sed -e "s/.* \\([0-9]\\)\\.\\([0-9]\\).*/\\1.\\2/")
LLVM_CPP17_VERSION=5.0
VERSION_COMPARED=$(shell echo "$(LLVM_VERSION) >= $(LLVM_CPP17_VERSION)" | bc)

ifeq ($(BUILD_ON_MINGW),yes)
CLANG_FLAGS=-target x86_64-pc-windows-gnu -fno-exceptions
MINGW_DIR=C:\MinGW
MINGW_GCC_INCLUDE_DIR=$(MINGW_DIR)\lib\gcc\x86_64-w64-mingw32\$(GCC_FULL_VERSION)\include
ISYSTEM_MINGW_INCLUDE_DIR = $(subst $(SPACE),$(COMMA),$(MINGW_DIR))\include
ISYSTEM_MINGW_INCLUDE_CPP_DIR = $(subst $(SPACE),$(COMMA),$(MINGW_DIR))\include\c++\$(GCC_FULL_VERSION)
ISYSTEM_MINGW_INCLUDE_X86_DIR = $(subst $(SPACE),$(COMMA),$(MINGW_DIR))\include\c++\$(GCC_FULL_VERSION)\x86_64-w64-mingw32
ISYSTEM_X64_DIR = $(subst $(SPACE),$(COMMA),$(MINGW_DIR))\x86_64-w64-mingw32\include
ISYSTEM_GCC_INCLUDE_DIR = $(subst $(SPACE),$(COMMA),$(MINGW_GCC_INCLUDE_DIR))
MINGW_ALL_INCLUDES = $(subst $(COMMA),$(SPACE),$(addprefix -isystem ,$(addsuffix ,$(ISYSTEM_MINGW_INCLUDE_DIR) $(ISYSTEM_MINGW_INCLUDE_CPP_DIR) $(ISYSTEM_MINGW_INCLUDE_X86_DIR) $(ISYSTEM_X64_DIR))))
endif

else
# Using g++
GCC_VERSION:=$(shell export LC_ALL=C ; g++ -v 2>&1 | tail -1 | sed -e "s/.* \\([0-9]\\)\\.\\([0-9]\\).*/\\1.\\2/")
GCC_CPP17_VERSION=7.2
VERSION_COMPARED=$(shell echo "$(GCC_VERSION) >= $(GCC_CPP17_VERSION)" | bc)
endif

ifeq ($(VERSION_COMPARED),1)
CPP_STD=-std=c++17
else
CPP_STD=-std=c++11
endif

# -O2 optimization is better than -O3 in this program
# Do not set -masm=intel for sources which include boost::thread
# -Wconversion causes warnings that are ignorable.
CPPFLAGS_WALL=-Wall -W -Wformat=2 -Wcast-qual -Wcast-align -Wwrite-strings -Wfloat-equal -Wpointer-arith -Wno-unused-parameter
CPPFLAGS=$(CPP_STD) $(CLANG_FLAGS) -O2 $(CPPFLAGS_WALL) -m64 $(CPPFLAGS_SSE_AVX) $(CPPFLAGS_PARALLEL) $(MINGW_ALL_INCLUDES)
CPPFLAGS_DIAGONAL=-DDIAGONAL_SUDOKU=1

POSTFIX_DIAGONAL=_diagonal
CELLS_UNPACKED_TARGET=bin/sudokusse
CELLS_PACKED_TARGET=bin/sudokusse_cells_packed
CELLS_DIAGONAL_TARGET=bin/sudokusse_diagonal
TARGETS=$(CELLS_UNPACKED_TARGET) $(CELLS_PACKED_TARGET) $(CELLS_DIAGONAL_TARGET)

ifneq (,$(findstring linux,$(shell gcc -dumpmachine)))
OS_DEPENDENT_OBJ=sudoku_linux.o
else
OS_DEPENDENT_OBJ=sudoku_windows.o
endif

CELLS_COMMON_OBJS=sudokumain.o sudoku.o sudokuxmmreg.o sudoku_std.o sudoku_boost.o
CELLS_UNPACKED_OBJS=$(CELLS_COMMON_OBJS) sudokusse_cells_unpacked.o $(OS_DEPENDENT_OBJ)
CELLS_PACKED_OBJS=$(CELLS_COMMON_OBJS) sudokusse_cells_packed.o $(OS_DEPENDENT_OBJ)
CELLS_DIAGONAL_OBJS=$(patsubst %.o,%$(POSTFIX_DIAGONAL).o,$(CELLS_UNPACKED_OBJS))
OBJS=$(sort $(CELLS_UNPACKED_OBJS) $(CELLS_PACKED_OBJS) $(CELLS_DIAGONAL_OBJS))

HEADERS=sudoku.h sudoku_os_dependent.h
GENERATED_CODE=sudokuConstAll.h
GENERATOR_SCRIPT_RUBY=sudokumap.rb
GENERATOR_SCRIPT_PYTHON=code_generator/sudokumap/sudokumap.py
GENERATOR_SCRIPTS=$(GENERATOR_SCRIPT_RUBY) $(GENERATOR_SCRIPT_PYTHON)

SOLUTION_CHECKER_SCRIPT=solve_sudoku_x.py

# To run testing by 'make test',
# download the hardest Sudoku puzzles from
#   http://staffhome.ecm.uwa.edu.au/~00013890/
# (Web browsers may save it as sudoku17.txt and you have to
#  rename it to sudoku17 after download it)
# and save as data/sudoku17, and
# download the hardest Sudoku-X puzzles from
#   http://www.sudocue.net/minx.php
# and save as data/sudoku-x-12-7193.sdm
# (These files are not included in this repository)
ifneq (,$(wildcard ./data/sudoku17.txt))
TEST_CASE_ORIGINAL_PUZZLE=data/sudoku17.txt
else
TEST_CASE_ORIGINAL_PUZZLE=data/sudoku17
endif
TEST_CASE_DIAGONAL_PUZZLE=data/sudoku-x-12-7193.sdm
TEST_CASE_SOLUTION=./sudoku_solution.txt

ALL_UPDATED_VARIABLES= \
	LD CXX AS RUBY PYTHON \
	USE_AVX_VALUE ASFLAGS_SSE_AVX CPPFLAGS_SSE_AVX CPPFLAGS_INTEL_SYNTAX \
	USE_BOOST_THREAD GCC_MAJOR_VERSION LDFLAGS LIBS CPPFLAGS_PARALLEL \
	GCC_FULL_VERSION LLVM_VERSION LLVM_CPP17_VERSION \
	GCC_VERSION GCC_CPP17_VERSION VERSION_COMPARED \
	CLANG_FLAGS MINGW_DIR MINGW_GCC_INCLUDE_DIR MINGW_ALL_INCLUDES \
	CPP_STD CPPFLAGS_WALL CPPFLAGS CPPFLAGS_DIAGONAL \
	POSTFIX_DIAGONAL CELLS_UNPACKED_TARGET CELLS_PACKED_TARGET CELLS_DIAGONAL_TARGET TARGETS \
	OS_DEPENDENT_OBJ CELLS_COMMON_OBJS CELLS_UNPACKED_OBJS CELLS_PACKED_OBJS CELLS_DIAGONAL_OBJS OBJS \
	HEADERS GENERATED_CODE GENERATED_CODE_PYTHON GENERATOR_SCRIPT_RUBY \
	GENERATOR_SCRIPT_PYTHON GENERATOR_SCRIPTS \
	SOLUTION_CHECKER_SCRIPT TEST_CASE_ORIGINAL_PUZZLE TEST_CASE_DIAGONAL_PUZZLE TEST_CASE_SOLUTION \


#Local Variables:
#mode: Makefile
#coding: utf-8-dos
#End:
