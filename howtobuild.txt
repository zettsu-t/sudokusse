SSE4.2版 数独solver ビルドおよび実行方法
Copyright (C) 2012-2013 Zettsu Tatsuya (是津達也)

[ビルド環境]
Windows 7 64 bit版

Ruby 1.9.2dev (2010-07-11 revision 28618) [i386-mswin32]
Cygwinとは別に用意する

MinGW-w64 および Cygwin 64bit version

MinGW-w64 for 64 bit Windows
+ MSYS     1.0.17
+ GNU Make 3.81
+ g++      4.8.1 (rev5, Built by MinGW-W64 project)
+ GNU assembler 2.23.2

Cygwin 64bit version
+ GNU Make 3.82.90
+ g++      4.8.1
+ GNU assembler 2.23.52


[実行環境]
Cygwin 1.7.25
Perl 5.14.4 (Cygwin同梱)

[テスト環境]
CppUnit 1.12.1 (MinGW-w64 + MSYS向けにビルド)


[ビルド方法]

1. MSYSコンソールを起動し、ソースファイル一式(sudoku.cpp)のあるディレクトリ
   に移動する(以下このディレクトリで作業することを前提とする)。

2. MSYSコンソールから

   make

と入力する。ビルドに成功するとbin/ディレクトリに実行ファイルが2つ生成される。
両実行ファイルの違いは後述する。

  sudokusse.exe : 通常版
  sudokusse_cells_packed.exe : 一部計算を簡略化したもの


[数独の初期ファイルを用意する]

テキストファイルを用意する。

初期数字が埋まっているマスは、その数字を半角の1から9で書く。空白のマス
は数字以外の任意の表示可能な1byte文字を書く(空白も可)。

<書式1 : 9文字 * 9行>
.3.....4.
.1..97.5.
..25.86..
..3...8..
9....43..
..76....4
..98.54..
.7.....2.
.5..71.8.

横一行のマスは、行の先頭から順に9文字(9byte)を当てはめる。行頭に余分な
文字を書いてはならない。各行の10文字目以降は無視するので、コメントなど
を書いて構わない。

<書式2 : 81文字 * 1行>
.3.....4..1..97.5...25.86....3...8..9....43....76....4..98.54...7.....2..5..71.8.

二行目以降は無視するので、コメントなどを書いて構わない。


[解となり得るものを数える]

Cygwinコンソールから

  bin/sudokusse.exe 0 < 数独の初期ファイル

と入力して実行すると、何個解があるかだけ表示する。合わせて実行時間を表示する。

  bin/sudokusse.exe 0 100 < 数独の初期ファイル

と入力して実行すると、解となり得るものを100個だけ、コンソールに出力する。
101個目以降は出力しない。100の代わりに任意の正の整数を入力すると、
その数だけ列挙する。実行が終わるのは、すべての解を数え上げた後になる。

bin/sudokusse.exe の代わりに、bin/sudokusse_cells_packed.exe を実行すると、
初期マップで埋まっているマスは左上に固まっていると仮定する。つまり
  a. 9マスとも埋まっている
  b. 左端から埋まってるマスが連続し、その後空白が右端まで連続する
  c. 空白だけ
という行が上から順に並ぶ。a,b,cともになくても構わないが、bはないかあっても
1行に限る。


[数独を解く]

Cygwinコンソールから

  bin/sudokusse.exe 解く回数 < 数独の初期ファイル

と入力して実行する。解く回数を正の整数にすると繰り返し解き、1回解くため
に掛かった最小時間を返す。

解く回数を正の整数にすると、符号を反転させた回数(-5と書いたら5回)だけ
実行する。解く過程を示す以外は、正の数を指定するのと同じである。通常は
-1を指定する。

bin/sudokusse_cells_packed.exe はマスは左上に固まっていると仮定して、
右下のマスを見落とすので、正しい解は出せない。そのためエラーを表示して
終了する。


[補助スクリプト]

1．時間計測

  perl sudoku_count.pl 数独の初期ファイル

を実行すると、実行ファイルを変えて繰り返し実行し、その結果をログに出力する。
ログファイル名は、実行日時を基に、SudokuTime_2013_09_27_21_34_56.log
などの名前を自動生成する。無限ループなので、終了するにはCtrl-cを連打する
(一回押しただけでは終了しないことがある)。

2．最小実行時間を探し出す

  perl sudoku_search_timelog.pl SudokuTime_2013_09_27_21_34_56.log

と実行すると、上記のログを解析し、各実行ファイル(*.exe)ごとの最小実行
時間を探し出して表示する。ログのファイル名は適宜読みかえること。


[ユニットテスト]

1. 数独を解けるかどうか確認する

  perl sudoku_solve_all.pl

と実行すると、data/ 以下にあるテキストファイル(*.txt)を数独初期マップと
みなして解く。解ければ掛かった時間を表示し、解けなければその場で終了する。


2. 関数とアセンブリ言語のマクロをテストする

MSYSコンソールで、unittest/ サブディレクトリに移動し、

   make

と入力する。ビルドに成功するとunittest.exe および
unittest_cells_packed.exe が生成され、テストを実行する。
Makefileが正常終了すれば、テストに成功したと言える。


[出典および謝辞]

1. アルゴリズムの基本と例題(data/*.txt)を下記の書籍から頂きました。

  "プログラマのための論理パズル 難題を突破する論理思考トレーニング",
    Dennis E. Shasha (著), 吉平 健治 (翻訳), 2009/3, オーム社

2. CppUnitのクラス定義を下記の記事から頂きました。

http://www.atmarkit.co.jp/fdotnet/cpptest/cpptest02/cpptest02_02.html

3. 数独の解となり得るものを数えるというアイデアおよび、本プログラムの
開発において実行時間の比較対象として用いたプログラムは、川合秀実氏に
よるものです。下記の記事をご参照ください。

http://developer.cybozu.co.jp/tech/?p=1692

□
